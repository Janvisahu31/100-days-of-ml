import numpy as np

class Perceptron:
    def __init__(self, lr=0.01, epochs=1000):
        self.lr = lr
        self.epochs = epochs

    def fit(self, X, y):
        self.W = np.zeros(X.shape[1])
        self.b = 0
        y_ = np.where(y <= 0, -1, 1)

        for _ in range(self.epochs):
            for idx, x_i in enumerate(X):
                if y_[idx] * (np.dot(x_i, self.W) + self.b) <= 0:
                    self.W += self.lr * y_[idx] * x_i
                    self.b += self.lr * y_[idx]

    def predict(self, X):
        return np.sign(np.dot(X, self.W) + self.b)
